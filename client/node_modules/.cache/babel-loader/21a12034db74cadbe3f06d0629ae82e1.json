{"ast":null,"code":"var _jsxFileName = \"D:\\\\Test\\\\test\\\\client\\\\src\\\\components\\\\UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext(null);\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [userEmail, setUserEmail] = useState('');\n  useEffect(() => {\n    fetchUserEmail();\n  }, []);\n\n  const fetchUserEmail = async () => {\n    try {\n      const response = await fetch('/api/isAuth', {\n        method: 'GET',\n        credentials: 'include'\n      });\n\n      if (response.ok) {\n        const {\n          email\n        } = await response.json();\n        setUserEmail(email);\n      } else {\n        throw new Error('Failed to fetch user email');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: userEmail,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserProvider, \"rLy/3zTb72qvB2h1Io7mWX8L00E=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["D:/Test/test/client/src/components/UserContext.js"],"names":["React","createContext","useState","useEffect","UserContext","UserProvider","children","userEmail","setUserEmail","fetchUserEmail","response","fetch","method","credentials","ok","email","json","Error","error","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC,IAAD,CAAjC;AAEP,OAAO,MAAMI,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAC1CC,QAAAA,MAAM,EAAE,KADkC;AAE1CC,QAAAA,WAAW,EAAE;AAF6B,OAAhB,CAA5B;;AAKA,UAAIH,QAAQ,CAACI,EAAb,EAAiB;AACf,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAML,QAAQ,CAACM,IAAT,EAAxB;AACAR,QAAAA,YAAY,CAACO,KAAD,CAAZ;AACD,OAHD,MAGO;AACL,cAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAhBD;;AAkBA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEX,SAA7B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9BM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const UserContext = createContext(null);\r\n\r\nexport const UserProvider = ({ children }) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchUserEmail();\r\n  }, []);\r\n\r\n  const fetchUserEmail = async () => {\r\n    try {\r\n      const response = await fetch('/api/isAuth', {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n      });\r\n\r\n      if (response.ok) {\r\n        const { email } = await response.json();\r\n        setUserEmail(email);\r\n      } else {\r\n        throw new Error('Failed to fetch user email');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={userEmail}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}